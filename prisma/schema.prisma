// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üì¶ M√≥dulo de Cadastros
model Plan {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  billingCycle   String    @map("billing_cycle")
  maxUsers       Int       @map("max_users")
  maxDepartments Int       @map("max_departments")
  maxWhatsapp    Int       @map("max_whatsapp")
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  companies      Company[]

  @@map("plans")
}

model Company {
  id               Int                  @id @default(autoincrement())
  name             String
  planId           Int                  @map("plan_id")
  active           Boolean              @default(true)
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  plan             Plan                 @relation(fields: [planId], references: [id])
  departments      Department[]
  users            User[]
  contacts         Contact[]
  tickets          Ticket[]
  channels         Channel[]
  credentials      WhatsappCredential[] @relation("CompanyCredentials")
  Whatsapp         Whatsapp[]
  tags             Tag[]
  quickResponses   QuickResponse[]
  messageTemplates MessageTemplate[]

  @@map("companies")
}

model User {
  id          Int              @id @default(autoincrement())
  name        String
  email       String           @unique
  password    String
  companyId   Int              @map("company_id")
  active      Boolean          @default(true)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  company     Company          @relation(fields: [companyId], references: [id])
  departments DepartmentUser[]
  tickets     Ticket[]
  messages    Message[]
  sessions    Session[]

  @@map("users")
}

model Department {
  id            Int              @id @default(autoincrement())
  name          String
  companyId     Int              @map("company_id")
  active        Boolean          @default(true)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  company       Company          @relation(fields: [companyId], references: [id])
  users         DepartmentUser[]
  businessHours BusinessHours[]
  tickets       Ticket[]
  Whatsapp      Whatsapp[]
  Channel       Channel[]

  @@map("departments")
}

model DepartmentUser {
  id           Int        @id @default(autoincrement())
  departmentId Int        @map("department_id")
  userId       Int        @map("user_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  department   Department @relation(fields: [departmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("department_users")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  companyId Int      @map("company_id")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id])
  tickets   Ticket[]

  @@map("contacts")
}

model Ticket {
  id           Int        @id @default(autoincrement())
  protocol     String     @unique
  status       String
  priority     String
  companyId    Int        @map("company_id")
  departmentId Int        @map("department_id")
  contactId    Int        @map("contact_id")
  userId       Int?       @map("user_id")
  channelId    Int?       @map("channel_id")
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  company      Company    @relation(fields: [companyId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  contact      Contact    @relation(fields: [contactId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
  channel      Channel?   @relation(fields: [channelId], references: [id])
  messages     Message[]
  Whatsapp     Whatsapp?  @relation(fields: [whatsappId], references: [id])
  whatsappId   Int?
  tags         Tag[]

  @@map("tickets")
}

model Message {
  id         Int       @id @default(autoincrement())
  messageId  String // ID da mensagem no WhatsApp
  channelId  Int       @map("channel_id")
  channel    Channel   @relation(fields: [channelId], references: [id])
  from       String // N√∫mero do remetente
  type       String // Tipo da mensagem (text, image, document, etc)
  content    String // Conte√∫do da mensagem (texto ou JSON com dados da m√≠dia)
  timestamp  DateTime // Timestamp da mensagem
  status     String // Status da mensagem (RECEIVED, SENT, DELIVERED, READ, FAILED)
  direction  String // Dire√ß√£o da mensagem (INBOUND, OUTBOUND)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  Ticket     Ticket?   @relation(fields: [ticketId], references: [id])
  ticketId   Int?
  Whatsapp   Whatsapp? @relation(fields: [whatsappId], references: [id])
  whatsappId Int?

  @@index([channelId])
  @@index([messageId])
}

// Canais de comunica√ß√£o
model Channel {
  id                   Int                 @id @default(autoincrement())
  name                 String
  number               String // N√∫mero de telefone
  description          String?
  type                 String // WHATSAPP_CLOUD, WHATSAPP_ON_PREMISE, SMS, etc
  status               String              @default("DISCONNECTED")
  session              String? // Dados da sess√£o em JSON
  qrcode               String? // QR Code para conex√£o
  fbNumberPhoneId      String? // ID do n√∫mero de telefone no Facebook
  accountWBId          String? // ID da conta do WhatsApp Business
  isDefault            Boolean             @default(false)
  active               Boolean             @default(true)
  companyId            Int                 @map("company_id")
  departmentId         Int?                @map("department_id")
  whatsappCredentialId Int?                @map("whatsapp_credential_id")
  company              Company             @relation(fields: [companyId], references: [id])
  department           Department?         @relation(fields: [departmentId], references: [id])
  credential           WhatsappCredential? @relation(fields: [whatsappCredentialId], references: [id])
  messages             Message[]
  tickets              Ticket[]
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  @@index([companyId])
  @@index([departmentId])
  @@index([type])
  @@index([number])
  @@map("channels")
}

// Credenciais do Meta/Facebook
model WhatsappCredential {
  id              Int        @id @default(autoincrement())
  clientId        String     @map("client_id")
  clientSecret    String     @map("client_secret")
  fbExchangeToken String?    @map("fb_exchange_token")
  accessToken     String     @map("access_token")
  tokenType       String     @default("bearer") @map("token_type")
  expiresIn       Int?       @map("expires_in")
  expiresAt       DateTime?  @map("expires_at")
  active          Boolean    @default(true)
  companyId       Int        @map("company_id")
  company         Company    @relation("CompanyCredentials", fields: [companyId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  Channel         Channel[]
  Whatsapp        Whatsapp[]

  @@index([companyId, active])
  @@map("whatsapp_credentials")
}

model Whatsapp {
  id                   Int                 @id @default(autoincrement())
  name                 String
  number               String
  description          String?
  type                 String              @default("WHATSAPP_CLOUD")
  status               String              @default("DISCONNECTED")
  settings             Json? // Configura√ß√µes n√£o sens√≠veis
  session              String?
  qrcode               String?
  active               Boolean             @default(true)
  isDefault            Boolean             @default(false)
  companyId            Int                 @map("company_id")
  departmentId         Int?                @map("department_id")
  company              Company             @relation(fields: [companyId], references: [id])
  department           Department?         @relation(fields: [departmentId], references: [id])
  messages             Message[]
  tickets              Ticket[]
  credential           WhatsappCredential? @relation(fields: [whatsappCredentialId], references: [id])
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  whatsappCredentialId Int?

  @@index([companyId])
  @@index([departmentId])
  @@index([type])
  @@map("whatsapp")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model BusinessHours {
  id           Int        @id @default(autoincrement())
  departmentId Int        @map("department_id")
  dayOfWeek    Int        @map("day_of_week")
  startTime    String     @map("start_time")
  endTime      String     @map("end_time")
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("business_hours")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  color     String   @default("#666666")
  companyId Int      @map("company_id")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id])
  tickets   Ticket[]

  @@map("tags")
}

model QuickResponse {
  id        Int      @id @default(autoincrement())
  shortcut  String // Atalho para a resposta r√°pida (ex: #ola)
  message   String // Mensagem completa
  companyId Int      @map("company_id")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id])

  @@map("quick_responses")
}

model MessageTemplate {
  id         Int      @id @default(autoincrement())
  name       String // Nome do template
  language   String // Idioma do template (ex: pt_BR)
  category   String // Categoria do template (ex: MARKETING, UTILITY)
  status     String // Status do template (APPROVED, PENDING, REJECTED)
  components Json // Componentes do template em formato JSON
  companyId  Int      @map("company_id")
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  company    Company  @relation(fields: [companyId], references: [id])

  @@map("message_templates")
}
